---
import Layout from '../../layouts/Layout.astro';
import SectionHero from '../../components/SectionHero.astro';
import { categories } from '../../data/algorithms';

const section = categories.introduccion;
---

<Layout title={`${section.title} - Search Algorithms`} description={section.description}>
  <SectionHero
    title={section.title}
    subtitle={section.subtitle}
    description={section.description}
  />

  <section class="content-section">
    <h2>¬øQu√© es un problema de b√∫squeda?</h2>
    <p>
      Un problema de b√∫squeda es una clase de problemas computacionales donde el objetivo
      es encontrar una secuencia de acciones que lleve desde un estado inicial hasta un
      estado que satisfaga ciertos criterios (estado objetivo).
    </p>

    <div class="definition-box">
      <h3>Definici√≥n Formal</h3>
      <p>Un problema de b√∫squeda se define por:</p>
      <ul>
        <li><strong>Estado inicial:</strong> El punto de partida del problema</li>
        <li><strong>Funci√≥n de acciones:</strong> Las operaciones disponibles en cada estado</li>
        <li><strong>Modelo de transici√≥n:</strong> C√≥mo cambia el estado con cada acci√≥n</li>
        <li><strong>Test de objetivo:</strong> Determina si un estado es la soluci√≥n</li>
        <li><strong>Funci√≥n de costo:</strong> Asigna un costo num√©rico a cada camino</li>
      </ul>
    </div>
  </section>

  <section class="content-section">
    <h2>Componentes de un Problema de B√∫squeda</h2>

    <div class="component-grid">
      <div class="component-card">
        <h3>üéØ Estado Inicial</h3>
        <p>
          El estado desde el cual el agente comienza la b√∫squeda. Por ejemplo,
          en un problema de navegaci√≥n, ser√≠a la posici√≥n actual.
        </p>
        <div class="example">
          <strong>Ejemplo:</strong> En el juego del 8-puzzle, el estado inicial
          es la configuraci√≥n inicial de las fichas.
        </div>
      </div>

      <div class="component-card">
        <h3>‚ö° Acciones</h3>
        <p>
          Las operaciones que el agente puede realizar en un estado dado.
          Define el conjunto de movimientos legales.
        </p>
        <div class="example">
          <strong>Ejemplo:</strong> En el 8-puzzle, las acciones son mover
          la ficha vac√≠a arriba, abajo, izquierda o derecha.
        </div>
      </div>

      <div class="component-card">
        <h3>üîÑ Modelo de Transici√≥n</h3>
        <p>
          Describe el resultado de aplicar una acci√≥n en un estado particular.
          Define c√≥mo evoluciona el estado.
        </p>
        <div class="example">
          <strong>Ejemplo:</strong> Resultado(estado, mover_arriba) = nuevo_estado
          con la ficha vac√≠a movida hacia arriba.
        </div>
      </div>

      <div class="component-card">
        <h3>‚úÖ Test de Objetivo</h3>
        <p>
          Funci√≥n que determina si un estado dado satisface los criterios
          de soluci√≥n del problema.
        </p>
        <div class="example">
          <strong>Ejemplo:</strong> En el 8-puzzle, verificar si las fichas
          est√°n en el orden: 1,2,3,4,5,6,7,8,vac√≠o.
        </div>
      </div>

      <div class="component-card">
        <h3>üí∞ Funci√≥n de Costo</h3>
        <p>
          Asigna un costo num√©rico a cada camino. Permite comparar diferentes
          soluciones y encontrar la √≥ptima.
        </p>
        <div class="example">
          <strong>Ejemplo:</strong> En navegaci√≥n, podr√≠a ser la distancia
          recorrida o el tiempo transcurrido.
        </div>
      </div>

      <div class="component-card">
        <h3>üß≠ Espacio de Estados</h3>
        <p>
          El conjunto de todos los estados posibles del problema, junto con
          las acciones que los conectan.
        </p>
        <div class="example">
          <strong>Ejemplo:</strong> En el 8-puzzle, hay 9!/2 = 181,440
          estados posibles alcanzables.
        </div>
      </div>
    </div>
  </section>

  <section class="content-section">
    <h2>Tipos de Algoritmos de B√∫squeda</h2>

    <div class="algorithm-types">
      <div class="type-card tree-based">
        <h3>üå≥ B√∫squeda en √Årbol</h3>
        <p>
          Los algoritmos de b√∫squeda en √°rbol no mantienen registro de los estados
          previamente visitados. Esto puede llevar a explorar el mismo estado m√∫ltiples veces.
        </p>
        <ul>
          <li>Menor uso de memoria</li>
          <li>Posible redundancia en la exploraci√≥n</li>
          <li>Riesgo de bucles infinitos</li>
        </ul>
      </div>

      <div class="type-card graph-based">
        <h3>üìä B√∫squeda en Grafo</h3>
        <p>
          Los algoritmos de b√∫squeda en grafo mantienen un registro de los estados
          explorados para evitar redundancia y bucles infinitos.
        </p>
        <ul>
          <li>Mayor uso de memoria</li>
          <li>Evita exploraci√≥n redundante</li>
          <li>Previene bucles infinitos</li>
        </ul>
      </div>
    </div>
  </section>

  <section class="content-section">
    <h2>Criterios de Evaluaci√≥n</h2>

    <div class="criteria-grid">
      <div class="criteria-card">
        <h3>‚ú® Completitud</h3>
        <p>
          ¬øEl algoritmo garantiza encontrar una soluci√≥n si existe una?
        </p>
        <div class="criteria-levels">
          <span class="complete">Completo</span>
          <span class="incomplete">No Completo</span>
        </div>
      </div>

      <div class="criteria-card">
        <h3>üéØ Optimalidad</h3>
        <p>
          ¬øEl algoritmo garantiza encontrar la soluci√≥n de menor costo?
        </p>
        <div class="criteria-levels">
          <span class="optimal">√ìptimo</span>
          <span class="suboptimal">Sub√≥ptimo</span>
        </div>
      </div>

      <div class="criteria-card">
        <h3>‚è±Ô∏è Complejidad Temporal</h3>
        <p>
          ¬øCu√°nto tiempo toma encontrar una soluci√≥n?
        </p>
        <div class="complexity-example">
          Ejemplo: O(b^d) donde b = factor de ramificaci√≥n, d = profundidad
        </div>
      </div>

      <div class="criteria-card">
        <h3>üíæ Complejidad Espacial</h3>
        <p>
          ¬øCu√°nta memoria requiere el algoritmo durante la ejecuci√≥n?
        </p>
        <div class="complexity-example">
          Ejemplo: O(bd) para almacenar la frontera y el camino actual
        </div>
      </div>
    </div>
  </section>

  <section class="next-steps">
    <h2>Contin√∫a Explorando</h2>
    <p>
      Ahora que comprendes los fundamentos, explora las diferentes estrategias
      de b√∫squeda y c√≥mo se aplican estos conceptos en la pr√°ctica.
    </p>

    <div class="navigation-cards">
      <a href="/secciones/no-informadas" class="nav-card">
        <h3>B√∫squeda No Informada ‚Üí</h3>
        <p>Explora BFS, DFS, UCS y otros algoritmos ciegos</p>
      </a>

      <a href="/secciones/informadas" class="nav-card">
        <h3>B√∫squeda Informada ‚Üí</h3>
        <p>Descubre A*, Greedy y el poder de las heur√≠sticas</p>
      </a>
    </div>
  </section>

  <style>
    .content-section {
      margin-bottom: 4rem;
    }

    .content-section h2 {
      font-size: 2rem;
      margin-bottom: 1.5rem;
      color: var(--color-text);
    }

    .content-section p {
      font-size: 1.125rem;
      line-height: 1.7;
      color: var(--color-text-muted);
      margin-bottom: 1.5rem;
    }

    .definition-box {
      background: var(--color-card-bg);
      border: 1px solid var(--color-border);
      border-radius: 8px;
      padding: 2rem;
      margin: 2rem 0;
    }

    .definition-box h3 {
      color: var(--color-accent);
      margin-bottom: 1rem;
    }

    .definition-box p {
      color: var(--color-text);
    }

    .definition-box ul {
      list-style: none;
      padding: 0;
    }

    .definition-box li {
      padding: 0.5rem 0;
      border-bottom: 1px solid var(--color-border);
      color: var(--color-text);
    }

    .definition-box li:last-child {
      border-bottom: none;
    }

    .component-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 1.5rem;
      margin: 2rem 0;
    }

    .component-card {
      background: var(--color-card-bg);
      border: 1px solid var(--color-border);
      border-radius: 8px;
      padding: 1.5rem;
      transition: transform 0.2s ease;
    }

    .component-card:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }

    .component-card h3 {
      color: var(--color-accent);
      margin-bottom: 1rem;
      font-size: 1.125rem;
    }

    .component-card p {
      color: var(--color-text-muted);
      font-size: 0.9rem;
      line-height: 1.6;
      margin-bottom: 1rem;
    }

    .example {
      background: var(--color-code-bg);
      padding: 1rem;
      border-radius: 6px;
      font-size: 0.875rem;
      color: var(--color-text);
    }

    .algorithm-types {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
      gap: 2rem;
      margin: 2rem 0;
    }

    .type-card {
      padding: 2rem;
      border-radius: 8px;
      background: var(--color-card-bg);
      border: 1px solid var(--color-border);
      color: var(--color-text);
    }

    .tree-based {
      border-left: 4px solid #10b981;
    }

    .graph-based {
      border-left: 4px solid #3b82f6;
    }

    .type-card h3 {
      margin-bottom: 1rem;
      font-size: 1.25rem;
      color: var(--color-text);
    }

    .tree-based h3 {
      color: #10b981;
    }

    .graph-based h3 {
      color: #3b82f6;
    }

    .type-card p {
      margin-bottom: 1rem;
      color: var(--color-text-muted);
      line-height: 1.6;
    }

    .type-card ul {
      list-style: none;
      padding: 0;
    }

    .type-card li {
      padding: 0.5rem 0;
      color: var(--color-text);
      border-bottom: 1px solid var(--color-border);
    }

    .type-card li:last-child {
      border-bottom: none;
    }

    .criteria-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 1.5rem;
      margin: 2rem 0;
    }

    .criteria-card {
      background: var(--color-card-bg);
      border: 1px solid var(--color-border);
      border-radius: 8px;
      padding: 1.5rem;
      text-align: center;
    }

    .criteria-card h3 {
      color: var(--color-accent);
      margin-bottom: 1rem;
    }

    .criteria-card p {
      font-size: 0.9rem;
      margin-bottom: 1rem;
      color: var(--color-text-muted);
    }

    .criteria-levels {
      display: flex;
      gap: 0.5rem;
      justify-content: center;
    }

    .criteria-levels span {
      padding: 0.25rem 0.75rem;
      border-radius: 20px;
      font-size: 0.75rem;
      font-weight: 500;
    }

    .complete, .optimal {
      background: #dcfce7;
      color: #166534;
    }

    .incomplete, .suboptimal {
      background: #fef3c7;
      color: #92400e;
    }

    .complexity-example {
      background: var(--color-code-bg);
      padding: 0.75rem;
      border-radius: 6px;
      font-family: var(--font-mono);
      font-size: 0.75rem;
      color: var(--color-accent);
    }

    .next-steps {
      background: var(--color-code-bg);
      padding: 3rem 2rem;
      border-radius: 12px;
      text-align: center;
      margin-top: 4rem;
      border: 1px solid var(--color-border);
    }

    .next-steps h2 {
      color: var(--color-text);
      margin-bottom: 1rem;
    }

    .next-steps p {
      font-size: 1.125rem;
      color: var(--color-text-muted);
      margin-bottom: 2rem;
      max-width: 600px;
      margin-left: auto;
      margin-right: auto;
    }

    .navigation-cards {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 1.5rem;
      max-width: 800px;
      margin: 0 auto;
    }

    .nav-card {
      background: var(--color-card-bg);
      border: 1px solid var(--color-border);
      border-radius: 8px;
      padding: 2rem;
      text-decoration: none;
      color: inherit;
      transition: all 0.2s ease;
    }

    .nav-card:hover {
      border-color: var(--color-accent);
      transform: translateY(-2px);
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }

    .nav-card h3 {
      color: var(--color-accent);
      margin-bottom: 0.5rem;
      font-size: 1.125rem;
    }

    .nav-card p {
      color: var(--color-text-muted);
      font-size: 0.9rem;
      margin: 0;
    }

    @media (max-width: 768px) {
      .component-grid {
        grid-template-columns: 1fr;
      }

      .algorithm-types {
        grid-template-columns: 1fr;
      }

      .criteria-grid {
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      }

      .navigation-cards {
        grid-template-columns: 1fr;
      }
    }
  </style>
</Layout>